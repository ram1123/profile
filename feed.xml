<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ram1123.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ram1123.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-19T16:11:30+00:00</updated><id>https://ram1123.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Git CheatSheet</title><link href="https://ram1123.github.io/blog/2018/git/" rel="alternate" type="text/html" title="Git CheatSheet"/><published>2018-05-28T00:00:00+00:00</published><updated>2018-05-28T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2018/git</id><content type="html" xml:base="https://ram1123.github.io/blog/2018/git/"><![CDATA[<ul id="markdown-toc"> <li><a href="#some-important-notes" id="markdown-toc-some-important-notes">Some important notes</a></li> <li><a href="#grab-a-file-from-different-branch" id="markdown-toc-grab-a-file-from-different-branch">Grab a file from different branch</a></li> <li><a href="#check-difference-between-two-commits" id="markdown-toc-check-difference-between-two-commits">Check difference between two commits</a></li> <li><a href="#git-readme-tricks" id="markdown-toc-git-readme-tricks">GIT: Readme tricks</a></li> <li><a href="#git-reflog" id="markdown-toc-git-reflog">GIT reflog</a></li> <li><a href="#git-amend" id="markdown-toc-git-amend">GIT amend</a></li> <li><a href="#git-stash" id="markdown-toc-git-stash">Git Stash</a></li> <li><a href="#check-difference-between-two-branches" id="markdown-toc-check-difference-between-two-branches">Check difference between two branches</a></li> <li><a href="#git-rebase" id="markdown-toc-git-rebase">git rebase</a> <ul> <li><a href="#undoing-git-rebase" id="markdown-toc-undoing-git-rebase">Undoing git rebase</a></li> </ul> </li> <li><a href="#git-branching-model" id="markdown-toc-git-branching-model">Git branching model</a></li> <li><a href="#need-to-read" id="markdown-toc-need-to-read">Need to read</a></li> <li><a href="#references" id="markdown-toc-references">References</a></li> <li><a href="#git-patch" id="markdown-toc-git-patch">Git Patch</a></li> <li><a href="#important-links" id="markdown-toc-important-links">Important Links</a></li> <li><a href="#github-issues" id="markdown-toc-github-issues">GitHub Issues</a> <ul> <li><a href="#git-cannot-checkout-branch" id="markdown-toc-git-cannot-checkout-branch">Git: cannot checkout branch</a></li> <li><a href="#patch-does-not-apply" id="markdown-toc-patch-does-not-apply">Patch does not apply</a></li> </ul> </li> </ul> <p>Git is a distributed version control system that is widely used for software development and collaboration. It allows us to keep track of the changes we make to our code and collaborate with others on a project. Git maintains a history of the changes made to a project, allowing us to revert to previous versions if needed.</p> <p>Here are some basic Git commands and concepts:</p> <ul> <li><code class="language-plaintext highlighter-rouge">git init</code>: Initialize a Git repository in the current directory.</li> <li><code class="language-plaintext highlighter-rouge">git clone</code>: Clone an existing Git repository from a remote location to your local machine.</li> <li><code class="language-plaintext highlighter-rouge">git add</code>: Stage changes for commit.</li> <li><code class="language-plaintext highlighter-rouge">git commit</code>: Commit the staged changes to the repositoryâ€™s history.</li> <li><code class="language-plaintext highlighter-rouge">git push</code>: Push the committed changes to a remote repository.</li> <li><code class="language-plaintext highlighter-rouge">git pull</code>: Fetch and merge changes from a remote repository.</li> <li><code class="language-plaintext highlighter-rouge">git branch</code>: List, create, or delete branches.</li> <li><code class="language-plaintext highlighter-rouge">git checkout</code>: Switch to a different branch or revert to a specific commit.</li> <li><code class="language-plaintext highlighter-rouge">git merge</code>: Merge changes from one branch into another.</li> <li><code class="language-plaintext highlighter-rouge">git stash</code>: Temporarily save changes that have not been committed.</li> <li><code class="language-plaintext highlighter-rouge">git log</code>: View the history of commits in a repository.</li> </ul> <p>These are just a few of the basic Git commands. Git is a very powerful tool, and there are many more commands and features available.</p> <p>I am jotting down some notes primarily for my own reference, but I hope they may prove beneficial to others as well.</p> <h1 id="some-important-notes">Some important notes</h1> <ol> <li>We can run everytime the <code class="language-plaintext highlighter-rouge">git add &lt;fileName&gt;</code> command without commiting to github. So, that in case if file deletes or something bad happends then we can checkout latest verison of file using <code class="language-plaintext highlighter-rouge">git checkout &lt;fileName&gt;</code>.</li> </ol> <h1 id="grab-a-file-from-different-branch">Grab a file from different branch</h1> <ul> <li>We are in <code class="language-plaintext highlighter-rouge">master</code> branch and want to commit a file <code class="language-plaintext highlighter-rouge">app.js</code> from <code class="language-plaintext highlighter-rouge">experiment</code> branch. For this we have to do following:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master <span class="c"># Just to make sure we are on the correct branch master.</span>
git checkout experiment <span class="nt">--</span> app.js <span class="c"># then copy the version of app.js</span>
                                  <span class="c"># from branch "experiment"</span>
                                  <span class="c"># you should give the relative path of app.js</span>
                                  <span class="c"># now, its expecting that app.js should be in the</span>
                                  <span class="c"># same path where you are now.</span>
</code></pre></div></div> <p>Reference: https://stackoverflow.com/a/2364223/2302094</p> <h1 id="check-difference-between-two-commits">Check difference between two commits</h1> <ul> <li><strong>Using Sublime Merge</strong> one can check the difference using <code class="language-plaintext highlighter-rouge">CMD/CTRL + click</code> on the two commits.</li> </ul> <h1 id="git-readme-tricks">GIT: Readme tricks</h1> <p>GitHub readme follows the <a href="https://ram1123.github.io/_posts/2018-09-01-markdown.md">Markdown Language</a>. Apart from markdown formate there is some nice tricks for adding github link and others. Below I am summarizing some of them.</p> <ol> <li>Auto Linking References &amp; URLs in GitHub: <a href="https://help.github.com/en/articles/autolinked-references-and-urls">link</a></li> </ol> <h1 id="git-reflog">GIT reflog</h1> <p><strong>Reference:</strong></p> <ol> <li><a href="https://help.github.com/en/articles/using-git-rebase-on-the-command-line">https://help.github.com/en/articles/using-git-rebase-on-the-command-line</a></li> <li><a href="https://dev.to/blakedeboer/beginners-guide-to-interactive-rebasing-1ob">https://dev.to/blakedeboer/beginners-guide-to-interactive-rebasing-1ob</a></li> <li><a href="http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html">http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html</a></li> </ol> <h1 id="git-amend">GIT amend</h1> <h1 id="git-stash">Git Stash</h1> <ol> <li> <p>To create stach</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash
</code></pre></div> </div> </li> <li> <p>To list stash</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash list
</code></pre></div> </div> </li> <li> <p>To see stash</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash show
</code></pre></div> </div> </li> <li> <p>To apply stash</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash apply
</code></pre></div> </div> <p>or</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash pop
</code></pre></div> </div> <p>The above command will apply the latest stash. But, if there are many stash and you want to get stash number 3 which is named <code class="language-plaintext highlighter-rouge">stash@{3}</code>, then do:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash apply stash@<span class="o">{</span>3<span class="o">}</span>
</code></pre></div> </div> </li> <li> <p>To remove a stash</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash drop stash@<span class="o">{</span>0<span class="o">}</span>
</code></pre></div> </div> </li> <li> <p>Un-apply a stash:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash show <span class="nt">-p</span> stash@<span class="o">{</span>0<span class="o">}</span> | git apply <span class="nt">-R</span>
</code></pre></div> </div> </li> </ol> <h1 id="check-difference-between-two-branches">Check difference between two branches</h1> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff &lt;branch-1&gt; &lt;branch-2&gt;
</code></pre></div></div> <h1 id="git-rebase">git rebase</h1> <pre><code class="language-bash=">git rebase -i HEAD~3  # to squash last three commit
git push &lt;remote&gt; &lt;branch&gt; -f.
# use -f to force push. If you committed last three
# commits then you can't push directly. And if you
# surely know what you are doing then you can use `-f`.
</code></pre> <ul> <li><a href="https://stackoverflow.com/a/135614/2302094">https://stackoverflow.com/a/135614/2302094</a></li> <li><a href="https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history">https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history</a></li> </ul> <h2 id="undoing-git-rebase">Undoing git rebase</h2> <ul> <li>Undoing a git rebase: <a href="https://stackoverflow.com/a/135614/2302094">link</a></li> </ul> <h1 id="git-branching-model">Git branching model</h1> <p>Best reference that I found is in one of blog by <strong>Vincent Driessen</strong>: <a href="https://nvie.com/posts/a-successful-git-branching-model/">https://nvie.com/posts/a-successful-git-branching-model/</a></p> <h1 id="need-to-read">Need to read</h1> <ol> <li>https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/</li> <li>https://www.freecodecamp.org/news/how-not-to-be-afraid-of-git-anymore-fe1da7415286/</li> </ol> <h1 id="references">References</h1> <ol> <li>http://git.github.io/git-reference/index.html</li> </ol> <h1 id="git-patch">Git Patch</h1> <ol> <li> <p>Create a patch:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff <span class="o">&gt;</span> mypatch.patch
</code></pre></div> </div> </li> <li> <p>Apply a patch:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git apply mypatch.patch
</code></pre></div> </div> <p>or,</p> <p>To see whats going on behind the scene use option <code class="language-plaintext highlighter-rouge">-v</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git apply <span class="nt">-v</span> mypatch.patch
</code></pre></div> </div> </li> <li> <p>Alternative way to <code class="language-plaintext highlighter-rouge">git apply</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>patch <span class="nt">-p1</span> &lt; mypatch.patch
</code></pre></div> </div> <p>4.</p> </li> </ol> <h1 id="important-links">Important Links</h1> <ol> <li> <p>Git summary of commands: <a href="https://docs.google.com/presentation/d/e/2PACX-1vQlG_aWy4dH80VpEembxDe6d7QwyyIM3DnrZ3taHKg0rOmvlQughAxDsvIdkoV3DG1mEFScNCClRH5X/pub?start=false&amp;loop=false&amp;delayms=3000">my ppt link</a>, <a href="https://docs.google.com/presentation/d/1YIS9OSvuK1dmqPlNoWBNt-rEmYrNeaeYhdqbCh4Lt44/edit#slide=id.p">main ppt link</a></p> </li> <li> <p>Git stash: <a href="https://git-scm.com/book/en/v1/Git-Tools-Stashing">link</a></p> </li> <li>Debugging with git: <a href="https://dzone.com/articles/debugging-with-git">link</a></li> <li>Git tutorial: <a href="http://rogerdudler.github.io/git-guide/">http://rogerdudler.github.io/git-guide/</a></li> </ol> <h1 id="github-issues">GitHub Issues</h1> <h2 id="git-cannot-checkout-branch">Git: cannot checkout branch</h2> <p>Error msg: <code class="language-plaintext highlighter-rouge">error: pathspec 'â€¦' did not match any file(s) known to git</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote update
git fetch
git checkout <span class="nt">--track</span> origin/&lt;BRANCH-NAME&gt;
</code></pre></div></div> <p>Reference: <a href="https://stackoverflow.com/a/32578285/2302094">https://stackoverflow.com/a/32578285/2302094</a></p> <h2 id="patch-does-not-apply">Patch does not apply</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git apply example.patch
error: patch failed: includes/common.inc:626
error: includes/common.inc: patch does not apply
</code></pre></div></div> <p>Git couldnâ€™t apply the changes in the patch because it wasnâ€™t able to find the line(s) of code in question; they must have been changed or removed by another commit. Try these things:</p> <ul> <li> <p><strong>Make sure the patch hasnâ€™t already been applied.</strong> Look for it in git log or simply examine the code to see if the change(s) are already present. If they are, youâ€™re done. If they arenâ€™t or if only some of them are, try something else:</p> </li> <li> <p><strong>Use patch -p1 &lt; filename.patch.</strong> Whereas git apply altogether rejects a patch with any errors, patch -p1 works hunk by hunk, applying as many individual changes as it can. It backs up each file as filename.ext.orig before modifying it and saves rejected hunks in filename.ext.rej. Discard the .orig files and manually apply the changes left in the .rej. This is an easy strategy for small patches.</p> </li> </ul> <p>Reference: <a href="https://www.drupal.org/node/1129120">https://www.drupal.org/node/1129120</a></p>]]></content><author><name></name></author><category term="VCS"/><category term="git"/></entry></feed>