<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ram1123.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ram1123.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-22T14:43:15+00:00</updated><id>https://ram1123.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">CMS Full Detector Simulations based on mccm chain</title><link href="https://ram1123.github.io/blog/2024/CMS_FullSimulation/" rel="alternate" type="text/html" title="CMS Full Detector Simulations based on mccm chain"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2024/CMS_FullSimulation</id><content type="html" xml:base="https://ram1123.github.io/blog/2024/CMS_FullSimulation/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>I prepared a repository where I added a script that helps us to get easily the custom nanoAOD or the full cmssw detector simulation starting from the gridpack. The repository is available on GitHub: <a href="https://github.com/ram1123/CMS_FulllSimulation">CMS_FulllSimulation</a></p> <h1 id="getting-started-with-the-repository">Getting Started with the Repository</h1> <p>To begin using the CMS Full Simulation tools, you’ll need to clone the repository and navigate to the main directory:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:ram1123/CMS_FulllSimulation.git <span class="nt">-b</span> main
<span class="nb">cd </span>CMS_FulllSimulation
</code></pre></div></div> <h1 id="key-components">Key Components</h1> <p>The main script of the repository is <code class="language-plaintext highlighter-rouge">GetFullSimScriptsFromMCCM.py</code>, a Python script that automates the entire process from downloading the required scripts to submitting jobs via a Condor cluster. Here are the main tasks it performs:</p> <ol> <li><strong>Downloading Scripts:</strong> Automatically fetches scripts from specified URLs.</li> <li><strong>Script Modification and Parsing:</strong> Modifies scripts and extracts CMSSW version and configuration file information. The number of events and the logger frequency need to be updated by hand.</li> <li><strong>Executable and JDL File Generation:</strong> Creates executable scripts and Job Description Language (JDL) files for Condor job submission.</li> <li><strong>Job Submission:</strong> Submits the jobs using the generated JDL files.</li> </ol> <p>The workflow relies on external files such as <code class="language-plaintext highlighter-rouge">ChainDownloadLinkFromMccM_dict.py</code> for managing download links and <code class="language-plaintext highlighter-rouge">gridpack_lists.py</code> for listing the gridpacks needed with path.</p> <h1 id="step-by-step-simulation-process">Step-by-Step Simulation Process</h1> <p>The simulation process involves several steps, which are outlined in the repository’s README file:</p> <ol> <li><strong>Prepare Configuration Files:</strong> Generate Python configuration files required for each stage of the simulation using CMSDriver commands.</li> <li><strong>Modify Configuration:</strong> Append a random number generator to the configuration to ensure unique event generation, number of events, logger frequency, gridpack path, etc.</li> <li><strong>Run Scripts Sequentially:</strong> Execute each script in the proper sequence to process events through multiple CMS data formats.</li> </ol> <h1 id="conclusion">Conclusion</h1> <p>This repository significantly simplifies the task of running full detector simulations for the CMS experiment.</p> <h1 id="repository-link">Repository Link</h1> <p>All code and detailed instructions are available on GitHub: <a href="https://github.com/ram1123/CMS_FulllSimulation">CMS_FulllSimulation</a></p> <p>Feel free to clone, explore, and contribute to the improvement of this tools.</p>]]></content><author><name></name></author><category term="physics"/><category term="cms"/><category term="HEPAnalysis"/><category term="simulation"/><category term="simulation"/><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Physics Words and Concepts</title><link href="https://ram1123.github.io/blog/2024/KeyWords/" rel="alternate" type="text/html" title="Physics Words and Concepts"/><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2024/KeyWords</id><content type="html" xml:base="https://ram1123.github.io/blog/2024/KeyWords/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="quarkonium">Quarkonium</h1> <ul> <li>Quarkonium: Quark + Onium <ul> <li>Onium: A bound state of a particle and its antiparticle.</li> <li>Thus, the word, Quarkonium, refers to a bound state of a quark and an antiquark.</li> <li>Similarly, we have other words: charmonium, bottomonium, positronium, etc.</li> </ul> </li> <li>A quarkonium is a flavorless <a href="#meson">meson</a> whose constituents are a quark and its antiquark.</li> <li>Quarkonium states are important in the study of quantum chromodynamics, the theory of the strong nuclear force. Quarkonium states are also important in the study of heavy quark physics, as they provide a laboratory for testing perturbative and nonperturbative aspects of quantum chromodynamics.</li> </ul> <h1 id="meson">Meson</h1> <ul> <li>A hadron composed of one quark and one antiquark, bound together by the strong interaction, known as meson.</li> <li>As it is composed of quark-antiquark pairs, it has a <strong>baryon number of 0</strong>.</li> </ul> <h1 id="baryon">Baryon</h1> <ul> <li>A hadron composed of three quarks, bound together by the strong interaction, known as baryon.</li> <li>As it is composed of three quarks, it has a <strong>baryon number of 1</strong>.</li> </ul>]]></content><author><name></name></author><category term="physics"/><category term="keywords"/><category term="keywords"/><category term="physics"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">Macbook Keynote Tricks</title><link href="https://ram1123.github.io/blog/2023/KeynoteTricks/" rel="alternate" type="text/html" title="Macbook Keynote Tricks"/><published>2023-08-25T00:00:00+00:00</published><updated>2023-08-25T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/KeynoteTricks</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/KeynoteTricks/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="create-template-for-keynote">Create template for Keynote</h1> <h2 id="set-global-footer-in-keynote">Set global footer in keynote</h2> <p>Reference: <a href="https://www.presentation.design/posts/quick-tip-global-footer-in-keynote">https://www.presentation.design/posts/quick-tip-global-footer-in-keynote</a></p>]]></content><author><name></name></author><category term="macbook"/><category term="presentation"/><category term="macbook"/><category term="presentation"/><category term="keynote"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">Scalar search in CMS</title><link href="https://ram1123.github.io/blog/2023/CMSScalarSearches/" rel="alternate" type="text/html" title="Scalar search in CMS"/><published>2023-05-10T00:00:00+00:00</published><updated>2023-05-10T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/CMSScalarSearches</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/CMSScalarSearches/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul>]]></content><author><name></name></author><category term="scalar,"/><category term="cms"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">HH Analysis in CMS</title><link href="https://ram1123.github.io/blog/2023/HH_Ana_CMS/" rel="alternate" type="text/html" title="HH Analysis in CMS"/><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/HH_Ana_CMS</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/HH_Ana_CMS/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul>]]></content><author><name></name></author><category term="HH,"/><category term="cms"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">dasgoclient</title><link href="https://ram1123.github.io/blog/2023/dasgoclient/" rel="alternate" type="text/html" title="dasgoclient"/><published>2023-02-28T00:00:00+00:00</published><updated>2023-02-28T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/dasgoclient</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/dasgoclient/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="introduction">Introduction</h1> <h1 id="how-to-use">How to use</h1> <ul> <li>General:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dasgoclient <span class="nt">--query</span><span class="o">=</span><span class="s2">"dataset=/VH*/*Summer20UL*/MINIAODSIM"</span>
</code></pre></div></div> <ul> <li>use <code class="language-plaintext highlighter-rouge">instance=prod/phys03</code>, if we are searching for user published dataset</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dasgoclient <span class="nt">--query</span><span class="o">=</span><span class="s2">"dataset=/VH*/*Summer20UL*/USER instance=prod/phys03"</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="dasgoclient,"/><category term="cms"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">fc command</title><link href="https://ram1123.github.io/blog/2023/fc_bash/" rel="alternate" type="text/html" title="fc command"/><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/fc_bash</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/fc_bash/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="fc-command">fc Command</h1> <p>fc stands for either <code class="language-plaintext highlighter-rouge">find command</code> or <code class="language-plaintext highlighter-rouge">fix command</code>, since it does both jobs. Use <code class="language-plaintext highlighter-rouge">fc -l</code> to list history commands and <code class="language-plaintext highlighter-rouge">fc -e</code> to edit them.</p> <p><strong><em>Examples</em></strong></p> <table> <thead> <tr> <th>Command</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>history</td> <td>List the last 16 commands</td> </tr> <tr> <td>fc -l 20 30</td> <td>List commands 20 through 30</td> </tr> <tr> <td>fc −l −5</td> <td>List the last five commands</td> </tr> <tr> <td>fc -l cat</td> <td>List all commands since the last command beginning with cat</td> </tr> <tr> <td>fc -l 50</td> <td>List all commands since command 50</td> </tr> <tr> <td>fc -ln 5 &gt; doit</td> <td>Save command 5 to file doit</td> </tr> <tr> <td>fc -e vi 5 20</td> <td>Edit commands 5 through 20 using vi</td> </tr> <tr> <td>fc -e vi -1 -8</td> <td>Edit last 8 commands using vi editor</td> </tr> <tr> <td>fc -e emacs</td> <td>Edit previous command using emacs</td> </tr> </tbody> </table> <p>Interactive line editing is easier to use than <code class="language-plaintext highlighter-rouge">fc</code>, since you can move up and down in the saved command history using your favorite editor commands (as long as your favorite editor is either vi or Emacs!). You can also use the Up and Down arrow keys to traverse the command history and the right and left arrow keys to move around in the command line.</p> <p>Reference:</p> <ul> <li>The fc Command - Linux in a Nutshell, 6th Edition [Book]</li> <li><a href="https://www.geeksforgeeks.org/fc-command-linux-examples">https://www.geeksforgeeks.org/fc-command-linux-examples</a></li> </ul>]]></content><author><name></name></author><category term="bash"/><category term="fc"/><category term="bash"/><category term="fc"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">CMS Software (CMSSW)</title><link href="https://ram1123.github.io/blog/2023/CMSSW/" rel="alternate" type="text/html" title="CMS Software (CMSSW)"/><published>2023-02-07T00:00:00+00:00</published><updated>2023-02-07T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/CMSSW</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/CMSSW/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="some-general-commands">Some general commands</h1> <ul> <li> <p>How to unset cmsenv:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">unset </span>CMS_PATH
<span class="nb">unset </span>SCRAM_ARCH
</code></pre></div> </div> </li> </ul>]]></content><author><name></name></author><category term="cmssw"/><category term="cms"/><category term="cern"/><category term="cmssw"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">CMS HEM Issue</title><link href="https://ram1123.github.io/blog/2023/HEM/" rel="alternate" type="text/html" title="CMS HEM Issue"/><published>2023-02-01T00:00:00+00:00</published><updated>2023-02-01T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2023/HEM</id><content type="html" xml:base="https://ram1123.github.io/blog/2023/HEM/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <h1 id="summary">Summary</h1> <ul> <li>HEM region: contained in: −3.0 ≺ 𝜂 &lt; −1.3, −1.57 &lt; 𝜙 &lt; −0.87</li> <li>Due to the power interruptions generated by the false fire alarms on Saturday June 30, 2018, negative endcap HCAL sectors HEM15 and HEM16 could not operate until the end of 2018 run. <ul> <li>First regular physics run afffected is 319077</li> </ul> </li> </ul> <h1 id="details">Details</h1> <ul> <li>HEM stands for HE minus. The negative endcap HCAL sectors HE minus 15 and 16 were no longer functional starting from June 30, 2018 until the end of 2018 run.</li> <li>This has resulted in the loss of readout of dPhi = 40 degree on HE minus side. The region contained in −3.0 ≺ 𝜂 &lt; −1.3, −1.57 &lt; 𝜙 &lt; −0.87. This corresponds to a 3% of the total HCAL (HB+HE) coverage.</li> <li>The problem can only be solved by opening the endcap (minus side) in December 2018.</li> <li>The details of the failure: <ul> <li>The damage occurred during low voltage power up procedure after an interlock due to a fire alarm</li> <li>The power supply unit that controlled HEM15/16 (and only those) incurred in an extremely rare and intermittent failure mode</li> <li>A voltage transient that reached 22 V was generated <ul> <li>More than twice as much as the front-end operational voltage of 10V and the HW limit of 11 V</li> </ul> </li> <li>This extremely rare fatal failure mode was never observed before <ul> <li>Escaped extensive burn-in and post-installation power cycling tests</li> <li>After PS extraction, 2 weeks of testing were needed to expose this failure mode on a test stand</li> <li>We have also verified that this PS transient does damage the front-end on a test stand</li> </ul> </li> </ul> </li> <li>We have implemented an additional safety system to mitigate the risk of further damage <ul> <li>The incident is being followed up with the power supply company to eliminate the risk of similar behavior from other power supplies</li> </ul> </li> <li>The impact of the HEM15-16 loss has been investigated in a variety of physics analyses <ul> <li>Trigger rates are OK, impact on physics analyses is generally small and mitigation options in reconstruction code have been implemented and are being further studied</li> </ul> </li> </ul> <p>Reference:</p> <ul> <li><a href="https://indico.cern.ch/event/980266/contributions/4129523/attachments/2152470/3629691/201130-HEM%20issue.pdf">https://indico.cern.ch/event/980266/contributions/4129523/attachments/2152470/3629691/201130-HEM%20issue.pdf</a></li> <li><a href="https://indico.cern.ch/event/754760/contributions/3127685/attachments/1722906/2782166/1_Borras.pdf">https://indico.cern.ch/event/754760/contributions/3127685/attachments/1722906/2782166/1_Borras.pdf</a></li> <li>EGamma: <a href="https://indico.cern.ch/event/732976/contributions/3095244/attachments/1698817/2735133/egammaHEM1516FakeRates.pdf">https://indico.cern.ch/event/732976/contributions/3095244/attachments/1698817/2735133/egammaHEM1516FakeRates.pdf</a></li> </ul>]]></content><author><name></name></author><category term="cms"/><category term="HEM"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry><entry><title type="html">GitLab workflow for CMS-AN</title><link href="https://ram1123.github.io/blog/2022/CMSAN_GitWorkflow/" rel="alternate" type="text/html" title="GitLab workflow for CMS-AN"/><published>2022-09-05T00:00:00+00:00</published><updated>2022-09-05T00:00:00+00:00</updated><id>https://ram1123.github.io/blog/2022/CMSAN_GitWorkflow</id><content type="html" xml:base="https://ram1123.github.io/blog/2022/CMSAN_GitWorkflow/"><![CDATA[<ul> <li>Do not remove this line (it will not be displayed)</li> </ul> <p>A gitlab workflow for analysis is given in this blog. This is a general git workflow, summarised in terms of CMS-AN.</p> <h1 id="summary-of-workflow">Summary of Workflow</h1> <ol> <li>Fork the repository under your gitlab account.</li> <li>Clone the repository using your username and setup as per the instruction given in Section-<a href="#gitlab-anpaper-clone-steps">Gitlab AN setup</a></li> <li>Checkout new branch (<code class="language-plaintext highlighter-rouge">git checkout -b &lt;BranchName&gt;</code>) and start working. You can commit frequently and save changes.</li> <li> <p>When you are ready with all your changes and think it should be merged in the central repository. Then do the following:</p> <ul> <li> <p>First update your local from <code class="language-plaintext highlighter-rouge">master</code> branch of our central repository.</p> </li> <li> <p>Then commit your changs and make the <strong>merge request</strong> to our central repository.</p> </li> </ul> </li> <li>Done.</li> </ol> <h1 id="detailed-workflow">Detailed workflow</h1> <p></p> <ol> <li> <p>Fork the repository from the central repository: <a href="https://gitlab.cern.ch/tdr/notes/AN-20-165">https://gitlab.cern.ch/tdr/notes/AN-20-165</a></p> <ul> <li> <p>Click on <code class="language-plaintext highlighter-rouge">Fork</code>, as shown in image below:</p> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/fork_1.png" alt=""/></p> </li> <li> <p>If you are attached with another organization then it may show you page as shown below then click on your name:</p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/fork_2.png" alt="fork_2"/></p> </blockquote> </li> </ul> </li> <li> <p>Now, one can see the repository into your gitlab account: <code class="language-plaintext highlighter-rouge">https://gitlab.cern.ch/users/&lt;LXPLUS-USER-NAME&gt;/projects</code>. Then click on the project named <strong>AN-20-165</strong>.</p> </li> <li> <p>Then copy the SSH link (we need this in <strong>step-5(c)</strong>).</p> <p>a.</p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/ssh_link_1.png" alt="ssh_link_1"/></p> </blockquote> <p>b.</p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/ssh_link_2.png" alt="ssh_link_2"/></p> </blockquote> </li> <li> <p>Clone the repository using the <strong>central repository</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--recursive</span> ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git
</code></pre></div> </div> </li> <li> <p>Next, we need to add remote which will point to our personal repository.</p> <p>a) What is “<strong>remote</strong>” in the above command?</p> <p>When we collaborate on a git project, where many people are working then we might need to get updates from other people repository. So, we need to know the address (or the pointer of the address) to the other repository. The pointer of the repository address is known as remote. Now, there are couple of things that we should know.</p> <p>b) <strong>How to check the remotes?</strong></p> <p>If you already cloned the repository (say <a href="https://gitlab.cern.ch/tdr/notes/AN-20-165">https://gitlab.cern.ch/tdr/notes/AN-20-165</a>) then you can check the remote name using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>AN-20-165
git remote <span class="nt">-v</span>
</code></pre></div> </div> <p>Its output should be like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>rasharma@lxplus734 AN-20-165]<span class="nv">$ </span>git remote <span class="nt">-v</span>
 origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
 origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
</code></pre></div> </div> <p>Here, the name of your remote is “origin”. If you clone from your personal repository, (say <a href="ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git">ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git</a>), then the origin will point to your repository (<strong>Added this line for information but don’t clone from personal repository, else you won’t get the utils directory by default. It is because of some permission issue.</strong>).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>rasharma@lxplus734 AN-20-165]<span class="nv">$ </span>git remote <span class="nt">-v</span>
 origin  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
 origin  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
</code></pre></div> </div> <p>c) <strong>How to add new remotes?</strong> If you cloned from the central repository, then you should add your repository remote. To add your remote:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>AN-20-165
git remote add &lt;ChooseAnyName&gt; ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git
</code></pre></div> </div> <p>I am choosing name “myRepo”.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>AN-20-165
git remote add myRepo ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git
</code></pre></div> </div> <p>Just to confirm if the remote is added or not, please check again the remote usign the command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>AN-20-165
git remote <span class="nt">-v</span>
</code></pre></div> </div> <p>Its output should be like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>rasharma@lxplus734 AN-20-165]<span class="nv">$ </span>git remote <span class="nt">-v</span>
 myRepo  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
 myRepo  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
 origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
 origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
</code></pre></div> </div> <p>Now you can see that there are two names <strong>myRepo</strong> and <strong>origin</strong>. Both of them are attached to the ssh link. One belongs to my github username and another belongs to our central repository.</p> <p>Once you added your remote you should always use your repository remote name for adding your commits.</p> <p><strong>NOTE:</strong> You should keep both remotes with you (central and yours). Your repository remote for committing your changes and central repository remote to update your local branch with the latest updates added by other people.</p> </li> <li> <p>Branch Creating:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>AN-20-165
git checkout <span class="nt">-b</span> &lt;NewBranchName&gt;
</code></pre></div> </div> <p>For example I created a branch named <strong>Doc_GitUses</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> Doc_GitUses
</code></pre></div> </div> </li> <li> <p>Check if the branch created using command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch
</code></pre></div> </div> <p>Output should look like:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>username@lxplus734 AN-20-165]<span class="nv">$ </span>git branch
 <span class="k">*</span> Doc_GitUses
 master
</code></pre></div> </div> <p>Here, “*” shows that the current banch on which you are is <strong>Doc_GitUses</strong>.</p> </li> <li>If you want to change the branch to master then do <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master
</code></pre></div> </div> <p>One should not work on master branch so don’t edit here. Go back to the branch you created using <code class="language-plaintext highlighter-rouge">git checkout NewBranchName</code>, then edit on <strong>NewBranchName</strong>.</p> </li> <li> <p>You can commit and push as many times as you want. When you think you are done then you should try to see if anyone else already update anything in master or not. For this you should try to pull the updates from master.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull &lt;remote-name&gt; master
</code></pre></div> </div> <p><strong>NOTE: Our main repository remote name is “origin”.</strong> So, the command that we should use is</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin master
</code></pre></div> </div> </li> <li>When you run the command: <code class="language-plaintext highlighter-rouge">git pull origin master</code> then it will pull the latest changes from master to your local (into your current branch).</li> </ol> <ul> <li> <p>Here you might get the merge conflict. This comes when two people are editing the same file. Then git is unable to decide what to choose.</p> </li> <li> <p>Now, we should open the file having conflicts then resolve it.</p> </li> <li> <p>If you don’t know about it please look at this link: <a href="https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/resolving-a-merge-conflict-using-the-command-line">Resolving a merge conflict using the command line</a></p> </li> <li> <p>If you have still an issue then please let me know.</p> </li> </ul> <ol> <li>If the <code class="language-plaintext highlighter-rouge">git pull</code> works without any error or warning then commit and push your changes:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit
</code></pre></div></div> <p>Then this will open the editor, where you can write a summary message of your commit then close the file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push &lt;remote-name&gt; &lt;NewBranchName&gt;
</code></pre></div></div> <p>In the previous steps, I took personal repository remote name as <code class="language-plaintext highlighter-rouge">myRepo</code> and NewBranchName as <code class="language-plaintext highlighter-rouge">Doc_GitUses</code>. So, one should use the command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push myRepo Doc_GitUses
</code></pre></div></div> <ol> <li>If you think you are ready for making merge request. Then before making merge request always update your local branch from master branch of the central repository. If the central repository given by <strong>origin</strong> :</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>rasharma@lxplus734 AN-20-165]<span class="nv">$ </span>git remote <span class="nt">-v</span>
   myRepo  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
   myRepo  ssh://git@gitlab.cern.ch:7999/rasharma/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
   origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>fetch<span class="o">)</span>
   origin  ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git <span class="o">(</span>push<span class="o">)</span>
</code></pre></div></div> <p>Then, you should update your local branch using command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull &lt;remote-name&gt; master
</code></pre></div></div> <p>In the example, that we showed above our central remote name is <strong>origin</strong> so we should run the command: Then, you should update your local branch using command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin master
</code></pre></div></div> <ol> <li>Finally, make the merge request from the gitlab webpage as shown below:</li> </ol> <ul> <li>Step-1: <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/merge_1.png" alt="merge_1"/></p> </blockquote> </li> <li> <p>Step-2: <strong>Here, remember to fill out “Assignee” as @atishelm</strong></p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/merge_2.png" alt="merge_2"/></p> </blockquote> </li> </ul> <h1 id="commands-summary">Commands Summary</h1> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--recursive</span> ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git  <span class="c"># if you are working on lxplus you should use ssh link</span>
<span class="nb">cd </span>AN-20-165
git remote add myRepo ssh://git@gitlab.cern.ch:7999/&lt;YourUserName&gt;/AN-20-165.git
<span class="c"># Next step create a branch name with the doc \you want to add (say you want to update systematics)</span>
git checkout <span class="nt">-b</span> Doc_Systematics
<span class="c"># Edit files</span>
git add a.tex b.tex <span class="c"># add all the files that you modified</span>
git commit <span class="c"># this opens up the editor add your update summary and close this  file.</span>
git pull origin master <span class="c"># Grab the latest updates from master branch</span>
<span class="c"># you might see some conflict if you and some other people edited the same branch. If yes, then you need to remove conflict and then commit.</span>
git push myRepo Doc_Systematics  <span class="c"># Here myRepo and Doc_Systematics are the names that you assigned above.</span>
<span class="c"># Go to wepage of your github repo and make pull request.</span>
</code></pre></div></div> <h1 id="some-known-issues--their-fixes">Some known issues &amp; their fixes</h1> <ol> <li> <p><strong>Always try to clone from central repository only. i.e. <code class="language-plaintext highlighter-rouge">ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git</code>.</strong> There is a known issue of the permission of cloing the utils as submodule. If we clone from central repository then it automatically clones the utils repository. This does not work when we try to clone from our personal (forked) repository.</p> </li> <li> <p>If your ssh key is not properly saved in the gitlab then you may get following error:</p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/ssh_clone_issue.png" alt="ssh_clone_issue"/></p> </blockquote> <p>Generally, all of us work with both github and gitlab. So, we should keep the ssh key same at both places. The above error appears when the key is not matched at lxplus and at gitlab. To fix this issue try to copy the content of file <code class="language-plaintext highlighter-rouge">.ssh/id_rsa.pub</code> from your lxplus. Then add it in your gitlab account settings and save it. Then it should work.</p> <blockquote> <p><img src="https://ram1123.github.io/assets/CMS_AN_GitLabWorkFlow/ssh_key.png" alt="ssh_key"/></p> </blockquote> </li> </ol> <h1 id="gitlab-anpaper-clone-steps">Gitlab AN/Paper clone steps</h1> <h2 id="setup-commands">Setup Commands</h2> <p>To clone on lxplus, first move to your desired working area on lxplus and clone the respository:</p> <p>Via HTTPS:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone --recursive https://gitlab.cern.ch/tdr/notes/AN-20-165.git
</code></pre></div></div> <p>Via SSH:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone --recursive ssh://git@gitlab.cern.ch:7999/tdr/notes/AN-20-165.git
</code></pre></div></div> <p><strong>Note:</strong> If you clone via SSH, you will need to set your git user email address in order for your GitLab profile picture to show up on the GitLab.com remote repository next to your commits. This is recommended as it will make it easier to identify who makes commits. This is done in your cloned repository with the command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --local user.email "username@cern.ch"
</code></pre></div></div> <p>where “username@cern.ch” should be your CERN e-mail address, as this should be associated with your GitLab account.</p> <p>Via KRB5:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone --recursive https://:@gitlab.cern.ch:8443/tdr/notes/AN-20-165.git
</code></pre></div></div> <p>Note the –recursive option, necessary for the linked “utils” commit to be cloned for the tdr executable.</p> <p>After cloning you should change to the cloned repository directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd AN-20-165
</code></pre></div></div> <p>Then run one of the following commands, depending on your shell. I used -sh for bash (Bourne-Again shell) on lxplus by default. This command needs to be run every time you start a new lxplus session:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eval `utils/tdr runtime -sh` # bash
eval `utils/tdr runtime -csh` # csh
eval `utils/tdr runtime -fish` # fish
</code></pre></div></div> <p>To produce the PDF, run the tdr executable:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tdr --style=note b # the local document with the name of the directory is the default build target
</code></pre></div></div> <p>if this works properly, at the end of the output you should see:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PDF Output file: /tmp/&lt;lxplusUsername&gt;/tdr_bld_&lt;randomHash&gt;/AN-20-165_temp.pdf
</code></pre></div></div> <p>this is the location of the LaTeX generater PDF of the analysis note. The output should also notify you of any LaTeX compilation errors.</p> <h2 id="other-commands">Other Commands</h2> <p>In case the utils submodule is removed from the repository, it can be added back locally and committed with the commands:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule add -b master ../../utils
git add utils
git commit -m "Adding the latest utils submodule"
</code></pre></div></div> <p>it can also be updated to the latest available version via the commands:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule update --remote
git add utils
git commit -m "Updating to the latest utils commit"
</code></pre></div></div>]]></content><author><name></name></author><category term="git"/><category term="gitlab"/><category term="cms-AN"/><summary type="html"><![CDATA[Do not remove this line (it will not be displayed)]]></summary></entry></feed>